@page "/Prestamos/Edit/{PrestamoID:int}"

@inject NavigationManager navigationManager
@inject PrestamosService prestamosService
@rendermode InteractiveServer

<PageTitle>Prestamo Edit</PageTitle>
<EditForm Model="@Prestamo" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*HEADER*@
			<div class="card-header">
				<h5 class="card-title">Crear Nuevo Prestamo</h5>
			</div>

			@*BODY*@
			<div class="card-body">
				@*Campo ID (solo lectura)*@
				<div>
					<label class="form-label"><strong>ID:</strong></label>
					<InputNumber class="form-control" readonly @bind-Value="@Prestamo.PrestamoId"></InputNumber>
				</div>

				@*Campo Deudor*@
				<div>
					<label class="form-label"><strong>Deudor:</strong></label>
					<InputText class="form-control" @bind-Value="@Prestamo.Deudor" placeholder="Nombre Deudor"></InputText>
					<ValidationMessage For="@(() => Prestamo.Deudor)"></ValidationMessage>
				</div>

				@*Campo Concepto*@
				<div>
					<label class="form-label"><strong>Concepto:</strong></label>
					<InputText class="form-control" @bind-Value="@Prestamo.Concepto" placeholder="Concepto"></InputText>
					<ValidationMessage For="@(() => Prestamo.Concepto)"></ValidationMessage>
				</div>

				@*Campo Monto*@
				<div>
					<label class="form-label"><strong>Monto:</strong></label>
					<InputNumber class="form-control" @bind-Value="@Prestamo.Monto" placeholder="RD$ Monto"></InputNumber>
				</div>
				@Mensaje
			</div>

			@*FOOTER*@
			<div class="card-footer">
				@*BTN VOLVER*@
				<a href="/Prestamos/Index" class="btn btn-primary" type="button">
					<span class="bi bi-arrow-left mt-3">   Volver</span>
				</a>
				@*BTN GUARDAR*@
                <button type="submit" class="btn btn-success bi bi-floppy">    Guardar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int PrestamoID { get; set; }
	public Prestamos Prestamo { get; set; } = new Prestamos();
	public string Mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Prestamo = await prestamosService.Buscar(PrestamoID);
	}

	public async Task Guardar()
	{
		if (await prestamosService.ExisteDeudor(Prestamo.Deudor))
		{
			Mensaje = "Ya existe un prestamo con el mismo deudor.";
			return;
		}

		var modificado = await prestamosService.Guardar(Prestamo);

		if (modificado)
		{
			Mensaje = "Se ha modificado el prestamo correctamente!";
			navigationManager.NavigateTo("/Prestamos/Index");
			return;
		}
		else
		{
			Mensaje = "Ha ocurrido un error al modificar el registro...";
			return;
		}
	}
}